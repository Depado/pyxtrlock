#!/usr/bin/env python3
# emacs this is -*-python-*-

from ctypes import byref, pointer, POINTER
from ctypes import c_int, c_uint32

import xcb

lock_width = 28
lock_height = 40
lock_x_hot = 14
lock_y_hot = 21
lock_bits = bytes([
    0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0xf8, 0xff, 0x7f, 0x00, 0xe0, 0xff,
    0x3f, 0x00, 0xc0, 0xff, 0x1f, 0x00, 0x80, 0xff, 0x0f, 0xfc, 0x03, 0xff,
    0x0f, 0xfe, 0x07, 0xff, 0x0f, 0xff, 0x0f, 0xff, 0x07, 0xff, 0x0f, 0xfe,
    0x87, 0xff, 0x1f, 0xfe, 0x87, 0xff, 0x1f, 0xfe, 0x87, 0xff, 0x1f, 0xfe,
    0x87, 0xff, 0x1f, 0xfe, 0x87, 0xff, 0x1f, 0xfe, 0x87, 0xff, 0x1f, 0xfe,
    0x87, 0xff, 0x1f, 0xfe, 0x87, 0xff, 0x1f, 0xfe, 0x87, 0xff, 0x1f, 0xfe,
    0x87, 0xff, 0x1f, 0xfe, 0x01, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0xf8,
    0x01, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0xf8, 0x01, 0xf0, 0x00, 0xf8,
    0x01, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0x01, 0xf8,
    0x01, 0xf8, 0x01, 0xf8, 0x01, 0xf0, 0x00, 0xf8, 0x01, 0x60, 0x00, 0xf8,
    0x01, 0x60, 0x00, 0xf8, 0x01, 0x60, 0x00, 0xf8, 0x01, 0x60, 0x00, 0xf8,
    0x01, 0x60, 0x00, 0xf8, 0x01, 0x60, 0x00, 0xf8, 0x01, 0x00, 0x00, 0xf8,
    0x01, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0xf8,
    0xff, 0xff, 0xff, 0xff
])

mask_width = 28
mask_height = 40
mask_x_hot = 14
mask_y_hot = 21
mask_bits = bytes([
    0x00, 0xfe, 0x07, 0x00, 0x80, 0xff, 0x1f, 0x00, 0xc0, 0xff, 0x3f, 0x00,
    0xe0, 0xff, 0x7f, 0x00, 0xf0, 0xff, 0xff, 0x00, 0xf8, 0xff, 0xff, 0x01,
    0xf8, 0x03, 0xfc, 0x01, 0xf8, 0x01, 0xf8, 0x01, 0xfc, 0x01, 0xf8, 0x03,
    0xfc, 0x00, 0xf0, 0x03, 0xfc, 0x00, 0xf0, 0x03, 0xfc, 0x00, 0xf0, 0x03,
    0xfc, 0x00, 0xf0, 0x03, 0xfc, 0x00, 0xf0, 0x03, 0xfc, 0x00, 0xf0, 0x03,
    0xfc, 0x00, 0xf0, 0x03, 0xfc, 0x00, 0xf0, 0x03, 0xfc, 0x00, 0xf0, 0x03,
    0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0x0f,
    0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0x0f,
    0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0x0f,
    0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0x0f,
    0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0x0f,
    0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0x0f,
    0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0x0f,
    0xff, 0xff, 0xff, 0x0f
])


screen_num = c_int()

conn = xcb.connect(None, byref(screen_num))

# TODO if !conn...

print('screen {}'.format(screen_num.value))

setup = xcb.get_setup(conn)

iter_ = xcb.setup_roots_iterator(setup)

while screen_num.value:
    xcb.screen_next(byref(iter_))
    screen_num.value -= 1

screen = iter_.data.contents

# create window
window = xcb.generate_id(conn)

attrib = xcb.GetWindowAttributesReply(override_redirect=True)
ret = xcb.create_window(conn, xcb.COPY_FROM_PARENT, window, screen.root,
                        0, 0, 100, 100, 0, xcb.WINDOW_CLASS_INPUT_ONLY,
                        xcb.VisualID(xcb.COPY_FROM_PARENT),
                        xcb.CW_OVERRIDE_REDIRECT,
                        byref(c_uint32(1)))

# select input
mask = xcb.EVENT_MASK_KEY_PRESS | xcb.EVENT_MASK_RELEASE_PRESS
xcb.screensaver_select_input(conn, window, mask)

print("window id {} hex {}".format(window.value, hex(window.value)))

# set cursor
csr_map = xcb.image_create_pixmap_from_bitmap_data(conn, window, lock_bits,
                                                   lock_width, lock_height,
                                                   24, 0, 0, None)
csr_mask = xcb.image_create_pixmap_from_bitmap_data(conn, window, mask_bits,
                                                    mask_width, mask_height,
                                                    24, 0, 0, None)

csr_fg = xcb.alloc_named_color_sync(conn, screen.default_colormap,
                                    "steelblue3").contents
csr_bg = xcb.alloc_named_color_sync(conn, screen.default_colormap,
                                    "grey25").contents

cursor = xcb.generate_id(conn)
xcb.create_cursor(conn, cursor, csr_map, csr_mask,
                  csr_fg.visual_red, csr_fg.visual_green, csr_fg.visual_blue,
                  csr_bg.visual_red, csr_bg.visual_green, csr_bg.visual_blue,
                  lock_x_hot, lock_y_hot)

# map window
xcb.map_window(conn, window)
xcb.flush(conn)

# Grab keyboard
cookie = xcb.grab_keyboard(conn, 0, window, xcb.CURRENT_TIME,
                           xcb.GRAB_MODE_ASYNC, xcb.GRAB_MODE_ASYNC)
grab = xcb.grab_keyboard_reply(conn, cookie, None)


#print("named color:", named_color)
#for i in named_color.contents._fields_:
#    print("  {} = {}".format(i[0], getattr(named_color.contents, i[0])))

import time
time.sleep(10)

xcb.disconnect(conn)
